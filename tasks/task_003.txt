# Task ID: 3
# Title: Implement Sportmonks API Integration
# Status: done
# Dependencies: 2
# Priority: high
# Description: Integrate with the Sportmonks API to fetch and synchronize soccer data for matches, teams, players, and leagues as specified in the technical requirements.
# Details:
1. Create a service layer for Sportmonks API integration
2. Implement authentication with Sportmonks API
3. Create data fetching functions for different entity types
4. Implement data transformation to match Payload CMS models
5. Create synchronization tasks for initial data import
6. Implement incremental updates for live data
7. Add error handling and retry logic
8. Implement rate limiting to respect API constraints

```typescript
// services/sportmonks.ts
import axios from 'axios';

const sportmonksClient = axios.create({
  baseURL: 'https://api.sportmonks.com/v3',
  params: {
    api_token: process.env.SPORTMONKS_API_KEY,
  },
});

export async function fetchLiveMatches() {
  try {
    const response = await sportmonksClient.get('/fixtures/live');
    return transformMatchData(response.data.data);
  } catch (error) {
    console.error('Error fetching live matches:', error);
    throw error;
  }
}

export async function fetchTeams(leagueId: number) {
  try {
    const response = await sportmonksClient.get(`/teams/season/${leagueId}`);
    return transformTeamData(response.data.data);
  } catch (error) {
    console.error(`Error fetching teams for league ${leagueId}:`, error);
    throw error;
  }
}

// Transform functions to convert API data to our schema
function transformMatchData(matches) {
  return matches.map(match => ({
    // mapping logic
  }));
}

// Other fetch and transform functions
```

# Test Strategy:
1. Test API authentication
2. Verify data fetching for each entity type
3. Test data transformation functions
4. Validate synchronization tasks
5. Test error handling with mocked API failures
6. Verify rate limiting functionality
7. Test incremental updates with sample data
8. Measure performance and optimize if needed

# Subtasks:
## 1. Create Sportmonks API Client Service [done]
### Dependencies: None
### Description: Implement a base API client service that handles authentication, request configuration, and common error handling for all Sportmonks API calls.
### Details:
Create a service class using axios that configures the base URL, authentication headers with the API key, and implements interceptors for common error handling. Include methods for handling rate limiting, retries for failed requests, and proper logging of API interactions. Implement a request wrapper that standardizes error handling across all API calls.

## 2. Implement Data Fetching Functions for Core Entities [done]
### Dependencies: 3.1
### Description: Create specialized functions to fetch data for leagues, teams, players, and matches from the Sportmonks API.
### Details:
Build upon the base client to implement specific fetching functions for each entity type. Include support for query parameters, filtering, and Sportmonks' include system for related data. Handle pagination properly to retrieve complete datasets. Implement functions for both bulk fetching (e.g., all teams in a league) and individual entity retrieval (e.g., specific match details).

## 3. Create Data Transformation Layer [done]
### Dependencies: 3.2
### Description: Implement transformation functions that convert Sportmonks API response data into the format required by Payload CMS models.
### Details:
Create mapping functions for each entity type that transform the API response structure to match our database schema. Handle data type conversions, field renaming, and relationship mapping. Ensure all required fields are extracted and optional fields are handled appropriately. Implement validation to ensure transformed data meets our schema requirements.

## 4. Implement Synchronization Jobs for Initial Data Import [done]
### Dependencies: 3.3
### Description: Create scheduled jobs that perform the initial synchronization of all required data from Sportmonks to populate the database.
### Details:
Implement a synchronization service that orchestrates the full import of leagues, teams, players, and matches. Handle the proper order of imports to maintain data integrity (e.g., leagues before teams). Include progress tracking, error recovery, and the ability to resume interrupted imports. Implement batching to handle large datasets efficiently.

## 5. Implement Live Data Updates and Webhooks [done]
### Dependencies: 3.4
### Description: Create a system for receiving and processing real-time updates from Sportmonks for live matches and other time-sensitive data.
### Details:
Implement an endpoint to receive webhook notifications from Sportmonks. Create handlers for different update types (match events, score changes, etc.). Implement a polling fallback mechanism for live match updates in case webhooks fail. Ensure updates are processed efficiently and applied to the database in near real-time. Include conflict resolution for cases where updates arrive out of order.


# Task ID: 6
# Title: Implement Wave Detector Algorithm
# Status: pending
# Dependencies: 3, 4
# Priority: high
# Description: Develop the Wave Detector algorithm that calculates match significance (1-100 rating) based on various factors to help users identify which matches deserve attention.
# Details:
1. Define factors that contribute to match significance
2. Implement scoring algorithm for each factor
3. Create weighted scoring system
4. Implement real-time score updates
5. Add personalization adjustments based on user preferences
6. Create visualization data for wave representation
7. Implement Rising Tides detection for emerging significant matches

```typescript
// services/waveDetector.ts

interface WaveFactors {
  scoreDifference: number;
  timeRemaining: number;
  leagueImportance: number;
  rivalryFactor: number;
  tableImpact: number;
  recentGoals: number;
  redCards: number;
  userPreferences: any;
  // other factors
}

export function calculateWaveScore(match: any, userPreferences?: any): number {
  // Extract match data
  const factors: WaveFactors = {
    scoreDifference: Math.abs(match.homeScore - match.awayScore),
    timeRemaining: calculateTimeRemaining(match),
    leagueImportance: getLeagueImportance(match.league),
    rivalryFactor: getRivalryFactor(match.homeTeam, match.awayTeam),
    tableImpact: calculateTableImpact(match),
    recentGoals: countRecentGoals(match),
    redCards: countRedCards(match),
    userPreferences: userPreferences || {},
  };
  
  // Base score calculation
  let baseScore = 0;
  
  // Close score in late game
  if (factors.scoreDifference <= 1 && factors.timeRemaining < 15) {
    baseScore += 30;
  }
  
  // Recent goals increase excitement
  baseScore += factors.recentGoals * 15;
  
  // Red cards impact game dynamics
  baseScore += factors.redCards * 10;
  
  // League importance factor
  baseScore *= (0.5 + (factors.leagueImportance * 0.5));
  
  // Rivalry bonus
  baseScore += factors.rivalryFactor * 15;
  
  // Table impact
  baseScore += factors.tableImpact * 10;
  
  // Apply user preferences
  baseScore = applyUserPreferences(baseScore, factors);
  
  // Ensure score is between 1-100
  return Math.max(1, Math.min(100, Math.round(baseScore)));
}

function applyUserPreferences(score: number, factors: WaveFactors): number {
  let adjustedScore = score;
  
  // Boost score for favorite teams
  if (factors.userPreferences.favoriteTeams?.includes(factors.homeTeam) || 
      factors.userPreferences.favoriteTeams?.includes(factors.awayTeam)) {
    adjustedScore *= 1.2;
  }
  
  // Boost score for favorite leagues
  if (factors.userPreferences.favoriteLeagues?.includes(factors.league)) {
    adjustedScore *= 1.1;
  }
  
  return adjustedScore;
}

// Helper functions for each factor calculation
function calculateTimeRemaining(match: any): number {
  // Implementation
}

function getLeagueImportance(leagueId: string): number {
  // Implementation
}

// Other helper functions
```

# Test Strategy:
1. Test algorithm with various match scenarios
2. Verify all factors are correctly calculated
3. Test personalization adjustments
4. Validate Rising Tides detection
5. Test performance with multiple concurrent calculations
6. Verify real-time updates work correctly
7. Test edge cases (e.g., very high or low scores)
8. Validate visualization data format

# Subtasks:
## 1. Define and Document Wave Scoring Factors [pending]
### Dependencies: None
### Description: Identify, specify, and document all factors that contribute to match significance, including their data sources and expected value ranges.
### Details:
List all relevant factors (e.g., rivalry, position proximity, zone importance, form differential, H2H drama, timing, recent goals, red cards, league importance, user preferences). For each, define how it is measured, its data type, and its expected impact on the final score.

## 2. Implement Factor Extraction Helpers [pending]
### Dependencies: 6.1
### Description: Develop helper functions to extract and calculate each scoring factor from match data.
### Details:
For each factor defined, implement a TypeScript function that takes match data and returns the normalized value for that factor. Ensure functions are unit-testable and handle edge cases (e.g., missing data).

## 3. Develop Individual Factor Scoring Algorithms [pending]
### Dependencies: 6.2
### Description: Implement the scoring logic for each factor, mapping raw values to their respective score contributions (e.g., rivalry 0-30, position proximity 0-20, etc.).
### Details:
For each factor, create a scoring function that converts the normalized value into a score within its designated range. Document the mapping logic and ensure consistency with the overall scoring model.

## 4. Create Weighted Scoring and Aggregation System [pending]
### Dependencies: 6.3
### Description: Combine individual factor scores into a single weighted wave score, ensuring the total is normalized to a 1-100 scale.
### Details:
Implement a function that aggregates all factor scores using their respective weights. Normalize the final score to fit within the 1-100 range. Document the weighting rationale and allow for easy adjustment.

## 5. Integrate Personalization Adjustments [pending]
### Dependencies: 6.4
### Description: Incorporate user preferences (e.g., favorite teams/leagues) into the wave score calculation, allowing for personalized significance ratings.
### Details:
Modify the aggregation logic to apply user-specific boosts or adjustments based on their preferences. Ensure adjustments are configurable and do not break the 1-100 normalization.

## 6. Implement Real-Time Wave Score Updates [pending]
### Dependencies: 6.5
### Description: Enable real-time recalculation and updating of wave scores as match data changes (e.g., goals, red cards, time remaining).
### Details:
Set up listeners or polling mechanisms to detect match data changes and trigger recalculation of wave scores. Ensure efficient updates and minimal performance impact.

## 7. Develop Rising Tides Detection for Emerging Matches [pending]
### Dependencies: None
### Description: Implement logic to detect and flag matches whose wave scores are rapidly increasing, indicating emerging significance.
### Details:
Track historical wave scores for each match and identify significant upward trends over short periods. Flag such matches for special attention in the UI or API.

## 8. Generate Visualization Data for Wave Representation [pending]
### Dependencies: None
### Description: Produce structured data suitable for visualizing wave scores and trends (e.g., for graphs or heatmaps in the UI).
### Details:
Design and implement data structures and endpoints that provide time-series wave score data and rising tide indicators for each match. Ensure compatibility with frontend visualization requirements.

